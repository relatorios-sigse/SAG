SELECT 
/**
Modificaciones:
29-05-2020. Se convirtió en varchar el campo descripción, ya que tras la migración  el campo es tipo CLOB
04-09-2020: Conversión de BIGTEST A TEXT para campos AREA_DEL_RESPONSABLE_TAREA y area_hall
23-09-2020: Ajuste de query teniendo en cuenta cambio en modelo de datos: la relación entre hallazgos y formulario 
no usa las tablas GNFORMREGGROUP y GNFORMREG, sino GNASSOCFORMREG
26-01-2022: Inclusión de fecha de ejecución de actividad "Identificación de Hallazgo", días y meses desde la ejecución de dicha actividad.
También se realizó ajuste de fechas inicio y fin de hallazgo, para que incluyeran las horas.
26-01-2022: Inclusión de cálculo para procesos OM.. y PRO-R-01 (Riesgos)
**/

(SELECT 
--WFS.DTEXECUTION,
MAX(TO_DATE(TO_CHAR(WFS.DTEXECUTION,
                    'YYYY-MM-DD') || ' ' || WFS.TMEXECUTION,
                    'YYYY-MM-DD HH24:MI:SS')) 
FROM WFPROCESS WFP 
INNER JOIN WFSTRUCT WFS ON WFS.IDPROCESS=WFP.IDOBJECT 
INNER JOIN WFACTIVITY WFA ON WFS.IDOBJECT=WFA.IDOBJECT 
LEFT OUTER JOIN PMACTIVITY PP ON PP.CDACTIVITY=WFP.CDPROCESSMODEL 
INNER JOIN
                    PMACTREVISION PMACT 
                        ON (
                            PMACT.CDACTIVITY=WFP.CDPROCESSMODEL 
                            AND PMACT.CDREVISION=WFP.CDREVISION
                        ) 
LEFT OUTER JOIN
                    PMELEMENTLANGUAGE PMEL 
                        ON (
                            PMEL.CDSTRUCT=WFS.CDSTRUCTMODEL 
                            AND PMEL.FGLANGUAGE=3 
                            AND EXISTS (
                                SELECT
                                    1 
                            FROM
                                PMPROCESSLANGUAGE PML 
                            WHERE
                                PMACT.CDACTIVITY=PML.CDPROCESS 
                                AND PMACT.CDREVISION=PML.CDREVISION 
                                AND PML.FGLANGUAGE=3 
                                AND PML.FGENABLED=1
                        )
                    ) 
WHERE WFP.FGSTATUS <= 5 
AND (UPPER(WFS.NMSTRUCT) LIKE '%IDENTIFICACI%N DE% HALLAZGO%' OR 
     UPPER(WFS.NMSTRUCT) LIKE 'OPORTUNIDAD DE MEJORA%FUENTE DE DETECCI%N' OR
     UPPER(WFS.NMSTRUCT) LIKE 'REGISTRO DE RIESGO')
AND WFP.CDPROCESS = TEMPANA.CDPROCESS
AND WFS.FGSTATUS=3 ) FECHA_EJECUCION_IDENTIFICACION,

TEMPANA.cdprocess,
TEMPANA.id_hallazgo,        
TEMPANA.nombre_proceso,   
TEMPANA.titulo_hallazgo,
TEMPANA.cantidad,    


CASE WHEN TEMPANA.identificador is null THEN TEMPANA.id_hallazgo else TEMPANA.identificador END identificador,

NVL(TO_CHAR(tempana.fecha_deteccion,'YYYY-MM-DD HH24:MI:SS'),tempana.dtstart) fecha_deteccion,

TEMPANA.DTSTART AS FECHA_INICIO,
TEMPANA.DTFINISH AS FECHA_FIN,
TEMPANA.DAYS_FROM_START,
TEMPANA.DIAS_DESDE_INICIO,
TEMPANA.NUM_DIAS_DESDE_INICIO,

CAST(CASE WHEN TEMPANA.dir_regional = ' - ' THEN (SELECT NMATTRIBUTE FROM ADATTRIBVALUE ADATV,WFPROCATTRIB WFPROCA WHERE TEMPANA.IDOBJECT=WFPROCA.IDPROCESS AND WFPROCA.CDATTRIBUTE = ADATV.CDATTRIBUTE AND WFPROCA.CDVALUE=ADATV.CDVALUE AND WFPROCA.CDATTRIBUTE=292) else TEMPANA.dir_regional END AS VARCHAR(255)) dir_regional_division,

CAST(CASE WHEN TEMPANA.area_hall = ' - ' THEN (SELECT NMATTRIBUTE FROM ADATTRIBVALUE ADATV,WFPROCATTRIB WFPROCA WHERE TEMPANA.IDOBJECT=WFPROCA.IDPROCESS AND WFPROCA.CDATTRIBUTE = ADATV.CDATTRIBUTE AND WFPROCA.CDVALUE=ADATV.CDVALUE AND WFPROCA.CDATTRIBUTE=293) else TEMPANA.area_hall END AS VARCHAR(255)) area_hall,

CASE WHEN TEMPANA.nombre_quien_detec is null THEN tempana.NMUSERSTART else TEMPANA.nombre_quien_detec END nombre_quien_detec,

CASE WHEN TEMPANA.nombre_res_proc is null THEN 'Atributo no definido en hallazgo' else TEMPANA.nombre_res_proc END nombre_res_proc,

CASE WHEN TEMPANA.req_normativo is null THEN (SELECT NMATTRIBUTE FROM ADATTRIBVALUE ADATV,WFPROCATTRIB WFPROCA WHERE TEMPANA.IDOBJECT=WFPROCA.IDPROCESS
AND WFPROCA.CDATTRIBUTE = ADATV.CDATTRIBUTE AND WFPROCA.CDVALUE=ADATV.CDVALUE AND WFPROCA.CDATTRIBUTE=7) else TEMPANA.req_normativo END clau_normativa,

CASE WHEN TEMPANA.macroproceso is null THEN (SELECT NMATTRIBUTE FROM ADATTRIBVALUE ADATV,WFPROCATTRIB WFPROCA WHERE TEMPANA.IDOBJECT=WFPROCA.IDPROCESS
AND WFPROCA.CDATTRIBUTE = ADATV.CDATTRIBUTE AND WFPROCA.CDVALUE=ADATV.CDVALUE AND WFPROCA.CDATTRIBUTE=294) else TEMPANA.macroproceso END macroproceso,

CASE WHEN TEMPANA.proceso is null THEN (SELECT NMATTRIBUTE FROM ADATTRIBVALUE ADATV,WFPROCATTRIB WFPROCA WHERE TEMPANA.IDOBJECT=WFPROCA.IDPROCESS
AND WFPROCA.CDATTRIBUTE = ADATV.CDATTRIBUTE AND WFPROCA.CDVALUE=ADATV.CDVALUE AND WFPROCA.CDATTRIBUTE=295) else TEMPANA.proceso END proceso,

/**
CASE WHEN TEMPANA.subproceso is null THEN (SELECT NMATTRIBUTE FROM ADATTRIBVALUE ADATV,WFPROCATTRIB WFPROCA WHERE TEMPANA.IDOBJECT=WFPROCA.IDPROCESS
AND WFPROCA.CDATTRIBUTE = ADATV.CDATTRIBUTE AND WFPROCA.CDVALUE=ADATV.CDVALUE AND WFPROCA.CDATTRIBUTE=296) else TEMPANA.subproceso END subproceso,
**/

CASE WHEN dbms_lob.substr(TEMPANA.desc_hallazgo,4000,1) is null THEN dbms_lob.substr(TEMPANA.dsoccurrence,4000,1) else dbms_lob.substr(TEMPANA.desc_hallazgo,4000,1) END desc_hallazgo,

TEMPANA.estado_proceso,

TEMPANA.estado_hallazgo,

TEMPANA.situacion_hallazgo,

TEMPANA.tipo_hallazgo,


CASE WHEN TEMPANA.fuente_origen = 'Sin seleccionar' THEN (SELECT NMATTRIBUTE FROM ADATTRIBVALUE ADATV,WFPROCATTRIB WFPROCA WHERE TEMPANA.IDOBJECT=WFPROCA.IDPROCESS
AND WFPROCA.CDATTRIBUTE = ADATV.CDATTRIBUTE AND WFPROCA.CDVALUE=ADATV.CDVALUE AND WFPROCA.CDATTRIBUTE=266) else TEMPANA.fuente_origen END fuente_origen,


CASE WHEN TEMPANA.rut_res_proc is null THEN 'Atributo no definido en hallazgo' else TEMPANA.rut_res_proc END rut_res_proc,

CASE WHEN TEMPANA.cargo_res_proc is null THEN 'Atributo no definido en hallazgo' else TEMPANA.cargo_res_proc END cargo_res_proc


FROM ( SELECT  /*+ optimizer_features_enable('9.2.0.8') */  
(SELECT FM0.identificador
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) identificador,


(SELECT FM0.fechadeteccion
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) fecha_deteccion,


(SELECT (select D0.iddepartment from ADDEPARTMENT D0 where D0.NMDEPARTMENT = FM0.dirregional) || ' - ' || FM0.dirregional 
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) dir_regional,

(SELECT FM0.idarea || ' - ' || FM0.area area
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) area_hall,

(SELECT FM0.nombreresproceso
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) nombre_res_proc,

(SELECT FM0.rutresproceso 
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) rut_res_proc,

(SELECT FM0.resproceso 
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) cargo_res_proc,

(SELECT FM0.nomquiendetecta 
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) nombre_quien_detec,


(SELECT dbms_lob.substr(FM0.deschallazgo,4000,1) 
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) desc_hallazgo,


(SELECT FMCOMBO0.REQUISITONORMATI
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
LEFT OUTER JOIN DYNREQUISITOSNORMA FMCOMBO0 ON (FM0.OIDABC3sKABCQFw = FMCOMBO0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) req_normativo,

(SELECT FMCOMBO0.MACROPROCESO
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
LEFT OUTER JOIN DYNMACROPROCESO FMCOMBO0 ON (FM0.OIDABCrRwABCBCx = FMCOMBO0.OID )
WHERE A.IDOBJECT = P.IDOBJECT) macroproceso,


(SELECT FMCOMBO0.PROCESO
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
LEFT OUTER JOIN DYNPROCESO FMCOMBO0 ON (FM0.OIDABCHZTABCPMS = FMCOMBO0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) proceso,

/**
(SELECT FMCOMBO0.SUPROCESO
FROM WFPROCESS A 
LEFT OUTER JOIN GNFORMREGGROUP B ON (A.CDFORMREGGROUP = B.CDFORMREGGROUP )
LEFT OUTER JOIN GNFORMREG C ON (B.CDFORMREGGROUP = C.CDFORMREGGROUP )
LEFT OUTER JOIN DYNFORMGH FM0 ON (C.OIDENTITYREG = FM0.OID ) 
LEFT OUTER JOIN DYNSUBPROCESO FMCOMBO0 ON (FM0.OIDABC53JABCOBI = FMCOMBO0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) subproceso,
**/

(SELECT CASE when FM0.fuenteorigen = 1 then 'Supervisión' when FM0.fuenteorigen = 2 then 'Auditoría Interna de Calidad' 
when FM0.fuenteorigen = 3 then 'Auditoría Externa de Calidad' when FM0.fuenteorigen = 4 then 'Personal SAG' 
when FM0.fuenteorigen = 5 then 'Clientes' ELSE 'Sin seleccionar' END 
FROM WFPROCESS A 
LEFT OUTER JOIN GNASSOCFORMREG B ON A.CDASSOCREG = B.CDASSOC
LEFT OUTER JOIN DYNFORMGH FM0 ON (B.OIDENTITYREG = FM0.OID ) 
WHERE A.IDOBJECT = P.IDOBJECT) fuente_origen,

    P.CDPROCESS,        
    P.IDOBJECT,         
    P.IDPROCESS as id_hallazgo,        
    P.NMPROCESSMODEL as nombre_proceso,   
    P.NMPROCESS as titulo_hallazgo,        
    1 AS cantidad,      
    P.NMUSERSTART,      
    GNR.NMEVALRESULT,   
        incid.dsoccurrence,

                CASE P.FGSTATUS
                        WHEN 1 THEN 'En marcha'  
                        WHEN 2 THEN 'Suspendido'  
                        WHEN 3 THEN 'Cancelado'
                        WHEN 4 THEN 'Cerrado'
                        WHEN 5 THEN 'Bloqueado para edición'
                        END  AS estado_proceso,
                CASE WHEN P.FGCONCLUDEDSTATUS = 2
                     THEN 3
                     WHEN P.FGCONCLUDEDSTATUS = 1
                     THEN 1
                     WHEN VLTIMEFINISH = -1
                     THEN -1
                     WHEN (    ( P.DTESTIMATEDFINISH > CAST( SYSDATE+1 AS DATE) )
                            OR ( P.DTESTIMATEDFINISH IS NULL ) )
                     THEN 1
                     WHEN (    (     P.DTESTIMATEDFINISH = CAST( SYSDATE AS DATE) 
                                 AND P.NRTIMEESTFINISH >= (TO_CHAR(SYSDATE,'HH24') * 60)+(TO_CHAR(SYSDATE,'mi')) )
                            OR ( P.DTESTIMATEDFINISH = CAST( SYSDATE+1 AS DATE) ) )
                     THEN 2
                     ELSE 3
                 END AS FGDEADLINE
              , CASE WHEN P.FGCONCLUDEDSTATUS = 2
                     THEN 'Finalizado con atraso'
                     WHEN P.FGCONCLUDEDSTATUS = 1
                     THEN 'Finalizado dentro del plazo'
                     WHEN VLTIMEFINISH = -1
                     THEN 'Indeterminado'
                     WHEN (    ( P.DTESTIMATEDFINISH > CAST( SYSDATE+1 AS DATE) )
                            OR ( P.DTESTIMATEDFINISH IS NULL ) )
                     THEN 'Al día'
                     WHEN (    (     P.DTESTIMATEDFINISH = CAST( SYSDATE AS DATE) 
                                 AND P.NRTIMEESTFINISH >= (TO_CHAR(SYSDATE,'HH24') * 60)+(TO_CHAR(SYSDATE,'mi')) )
                            OR ( P.DTESTIMATEDFINISH = CAST( SYSDATE+1 AS DATE) ) )
                     THEN 'Próximo del vencimiento'
                     ELSE 'Atrasado'
                 END AS NMDEADLINE ,TO_CHAR(CAST(TRUNC(P.QTHOURS/1440) AS VARCHAR(20)),'0000') || ' día(s) ' || 
TO_CHAR(CAST(TRUNC((P.QTHOURS-(TRUNC(P.QTHOURS/1440)*1440))/60) AS VARCHAR(20)),'00') || ' hora(s) ' || 
TO_CHAR(CAST(P.QTHOURS-(TRUNC(P.QTHOURS/60)*60) AS VARCHAR(20)) ,'00') || ' minuto(s)' 
AS QTHOURS, 
CASE 
  WHEN  P.QTDURATION < 60 THEN P.QTDURATION || ' minuto(s)'
  WHEN  P.QTDURATION BETWEEN 60 AND 1440 THEN TRUNC((P.QTDURATION/60), 2) || ' hora(s)'
  WHEN  1440 < P.QTDURATION THEN TRUNC((P.QTDURATION/1440), 2) || ' día(s)'
END AS QTDURATION, 

CASE
WHEN P.FGSTATUS IN (1,2,3,5) THEN 
(
  TO_CHAR(TRUNC(SYSDATE - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss')), '0000') || ' día(s) ' ||
  TO_CHAR(TRUNC(((SYSDATE - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss')) 
  - TRUNC( (SYSDATE - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss'))))*24), '00') || ' hora(s) ' ||
  TO_CHAR(TRUNC(((((SYSDATE - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss')) 
  - TRUNC((SYSDATE - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss'))))*24) - TRUNC(((SYSDATE - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss')) 
  - TRUNC((SYSDATE - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss'))))*24))*60 ), '00') || ' minuto(s)' 
)
WHEN P.FGSTATUS = 4 THEN  
(
    TO_CHAR(TRUNC(TO_DATE(TO_CHAR(P.DTFINISH, 'dd/mm/yyyy') ||' '||P.TMFINISH, 'dd/mm/yyyy hh24:mi:ss')
    - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss')), '0000') || ' día(s) ' ||
    TO_CHAR(TRUNC(((TO_DATE(TO_CHAR(P.DTFINISH, 'dd/mm/yyyy') ||' '||P.TMFINISH, 'dd/mm/yyyy hh24:mi:ss')
    - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss'))
    - TRUNC( (TO_DATE(TO_CHAR(P.DTFINISH, 'dd/mm/yyyy') ||' '||P.TMFINISH, 'dd/mm/yyyy hh24:mi:ss')
    - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss')) ))*24), '00') || ' hora(s) ' ||
    TO_CHAR(TRUNC(((((TO_DATE(TO_CHAR(P.DTFINISH, 'dd/mm/yyyy') ||' '||P.TMFINISH, 'dd/mm/yyyy hh24:mi:ss')
    - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss')) 
    - TRUNC((TO_DATE(TO_CHAR(P.DTFINISH, 'dd/mm/yyyy') ||' '||P.TMFINISH, 'dd/mm/yyyy hh24:mi:ss')
    - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss')) ))*24) 
    - TRUNC(((TO_DATE(TO_CHAR(P.DTFINISH, 'dd/mm/yyyy') ||' '||P.TMFINISH, 'dd/mm/yyyy hh24:mi:ss')
    - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss')) 
    - TRUNC((TO_DATE(TO_CHAR(P.DTFINISH, 'dd/mm/yyyy') ||' '||P.TMFINISH, 'dd/mm/yyyy hh24:mi:ss') 
    - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy') ||' '||P.TMSTART, 'dd/mm/yyyy hh24:mi:ss'))))*24))*60 ), '00') ||' minuto(s)'
)   
END AS DURATION_WF ,    
--P.DTSTART AS DTSTART, 
     
TO_CHAR(P.DTSTART, 'YYYY') AS DTSTART_YEAR, 
TO_CHAR(P.DTSTART, 'MM') AS DTSTART_MONTH,
      
TO_DATE(TO_CHAR(P.DTSTART, 'YYYY-MM-DD') || ' ' || P.TMSTART,'YYYY-MM-DD HH24:MI:SS') AS DTSTART,
      
CASE WHEN P.DTFINISH IS NULL 
      THEN P.DTFINISH 
      ELSE TO_DATE(TO_CHAR(P.DTFINISH, 'YYYY-MM-DD') || ' ' || P.TMFINISH,'YYYY-MM-DD HH24:MI:SS')
END AS DTFINISH,
      
ROUND(SYSDATE - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy'), 'dd/mm/yyyy'))  AS DAYS_FROM_START,
ROUND(SYSDATE - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy'), 'dd/mm/yyyy'))  AS DIAS_DESDE_INICIO,
ROUND(SYSDATE - TO_DATE(TO_CHAR(P.DTSTART, 'dd/mm/yyyy'), 'dd/mm/yyyy'))  AS NUM_DIAS_DESDE_INICIO

, GNT.NMGENTYPE AS tipo_hallazgo, GNRS.IDREVISIONSTATUS AS estado_hallazgo, GNRS.NMREVISIONSTATUS AS situacion_hallazgo  FROM  WFPROCESS P INNER JOIN PMACTIVITY PP ON PP.CDACTIVITY = P.CDPROCESSMODEL 
                             INNER JOIN PMACTTYPE PT ON PT.CDACTTYPE = PP.CDACTTYPE 
  LEFT OUTER JOIN GNACTIVITY GNA ON (P.CDGENACTIVITY = GNA.CDGENACTIVITY) 
                             LEFT OUTER JOIN GNEVALRESULTUSED GNRUS ON (GNRUS.CDEVALRESULTUSED = GNA.CDEVALRSLTPRIORITY)
                             LEFT OUTER JOIN GNEVALRESULT GNR ON (GNRUS.CDEVALRESULT = GNR.CDEVALRESULT) 
                             LEFT OUTER JOIN GNREVISION GREV ON P.CDREVISION = GREV.CDREVISION 
                             

                LEFT OUTER JOIN (SELECT  CASE WHEN COUNT(GNASSOC.CDACCESSLIST) = SUM(GNLIST.FGPERMISSION) THEN 1 ELSE 0 END AS FGPERM, WFP.IDOBJECT  FROM  PMACTTYPESECURLIST GNLIST
                        INNER JOIN PMACTTYPESECURCTRL GNASSOC ON GNLIST.CDACCESSLIST = GNASSOC.CDACCESSLIST AND GNLIST.CDACTTYPE = GNASSOC.CDACTTYPE
                        INNER JOIN PMACCESSROLEFIELD GNCTRL ON GNASSOC.CDACCESSROLEFIELD = GNCTRL.CDACCESSROLEFIELD
                        INNER JOIN PMACCESSROLEFIELD GNCTRL_F ON GNCTRL.CDRELATEDFIELD = GNCTRL_F.CDACCESSROLEFIELD
                        INNER JOIN PMACTIVITY PMA ON GNLIST.CDACTTYPE = PMA.CDACTTYPE
                        INNER JOIN WFPROCESS WFP ON PMA.CDACTIVITY = WFP.CDPROCESSMODEL 
 LEFT JOIN ADUSERDEPTPOS UDP_DEP ON (UDP_DEP.CDDEPARTMENT = GNLIST.CDDEPARTMENT AND UDP_DEP.CDUSER = 831) 
                    LEFT JOIN ADUSERDEPTPOS UDP_DEPPOS ON (UDP_DEPPOS.CDDEPARTMENT = GNLIST.CDDEPARTMENT AND UDP_DEPPOS.CDPOSITION   = GNLIST.CDPOSITION 
                        AND UDP_DEPPOS.CDUSER = 831)
                    LEFT JOIN ADUSERDEPTPOS UDP_POS ON (UDP_POS.CDPOSITION = GNLIST.CDPOSITION AND UDP_POS.CDUSER = 831)
                    LEFT JOIN ADUSERROLE USR ON (USR.CDROLE = GNLIST.CDROLE AND USR.CDUSER = 831)
                    LEFT JOIN (
                        SELECT CDTEAM FROM ADTEAMMEMBER  WHERE FGTEAMMEMBER = 4 AND CDUSER = 831
                        UNION ALL
                        SELECT CDTEAM
                        FROM ADTEAMMEMBER TM,  ADUSERDEPTPOS UDP
                        WHERE UDP.CDUSER = 831 
                            AND
                            (
                                (TM.FGTEAMMEMBER = 1 AND TM.CDDEPARTMENT = UDP.CDDEPARTMENT)
                                OR (TM.FGTEAMMEMBER = 2 AND TM.CDPOSITION = UDP.CDPOSITION)
                                OR (TM.FGTEAMMEMBER = 3 AND TM.CDDEPARTMENT = UDP.CDDEPARTMENT AND TM.CDPOSITION = UDP.CDPOSITION)
                            )
                        ) TEAM ON TEAM.CDTEAM = GNLIST.CDTEAM 
 LEFT JOIN ADUSER US ON (US.CDUSER = WFP.CDUSERSTART AND US.CDLEADER = 831) 
 WHERE  GNCTRL_F.CDRELATEDFIELD  = 501
                        AND PMA.FGUSETYPEACCESS = 1 
 AND WFP.FGMODELWFSECURITY = 1  AND ( GNLIST.FGACCESSTYPE = 6
                       OR (GNLIST.FGACCESSTYPE = 1  AND TEAM.CDTEAM IS NOT NULL )
                       OR (GNLIST.FGACCESSTYPE = 2  AND UDP_DEP.CDUSER IS NOT NULL)
                       OR (GNLIST.FGACCESSTYPE = 3  AND UDP_DEPPOS.CDUSER IS NOT NULL)
                       OR (GNLIST.FGACCESSTYPE = 4  AND UDP_POS.CDUSER IS NOT NULL)
                       OR (GNLIST.FGACCESSTYPE = 5  AND GNLIST.CDUSER = 831)
                       OR (GNLIST.FGACCESSTYPE = 7  AND USR.CDROLE IS NOT NULL ) 
 OR  (GNLIST.FGACCESSTYPE = 30 AND WFP.CDUSERSTART = 831)
                OR (GNLIST.FGACCESSTYPE = 31 AND US.CDUSER IS NOT NULL) 
 
                        OR
                        (
                            GNLIST.FGACCESSTYPE = 9 AND EXISTS (SELECT 1 FROM ADUSERDEPTPOS ADUDP WHERE ADUDP.CDUSER = 831
                                AND EXISTS (SELECT 1 FROM ADUSERDEPTPOS WHERE CDUSER = PMA.CDCREATEDBY AND CDDEPARTMENT = ADUDP.CDDEPARTMENT))
                        )
                        OR
                        (
                            GNLIST.FGACCESSTYPE = 10 AND EXISTS (SELECT 1 FROM ADUSERDEPTPOS ADUDP WHERE ADUDP.CDUSER = 831
                                AND EXISTS (SELECT 1 FROM ADUSERDEPTPOS WHERE CDUSER = PMA.CDCREATEDBY AND CDDEPARTMENT = ADUDP.CDDEPARTMENT AND CDPOSITION = ADUDP.CDPOSITION))
                        )
                        OR
                        (
                            GNLIST.FGACCESSTYPE = 11 AND EXISTS (SELECT 1 FROM ADUSERDEPTPOS ADUDP WHERE ADUDP.CDUSER = 831
                                AND EXISTS (SELECT 1 FROM ADUSERDEPTPOS WHERE CDUSER = PMA.CDCREATEDBY AND CDPOSITION = ADUDP.CDPOSITION))
                        )
                        OR (GNLIST.FGACCESSTYPE = 12 AND EXISTS (SELECT 1 FROM ADUSER WHERE CDUSER = PMA.CDCREATEDBY AND CDLEADER = 831)) 
) 
 GROUP BY  PMA.CDACTIVITY,  WFP.IDOBJECT ) SECPROCTP_1 ON (P.IDOBJECT = SECPROCTP_1.IDOBJECT)
                LEFT OUTER JOIN (SELECT  CASE WHEN COUNT(GNASSOC.CDACCESSLIST) = SUM(GNLIST.FGPERMISSION) THEN 1 ELSE -1 END AS FGPERM,  GNLIST.CDPROC FROM  PMPROCACCESSLIST GNLIST 
                        INNER JOIN PMPROCSECURITYCTRL GNASSOC ON GNLIST.CDACCESSLIST = GNASSOC.CDACCESSLIST AND GNLIST.CDPROC = GNASSOC.CDPROC
                        INNER JOIN PMACCESSROLEFIELD GNCTRL ON GNASSOC.CDACCESSROLEFIELD = GNCTRL.CDACCESSROLEFIELD
                        INNER JOIN PMACTIVITY OBJ ON GNASSOC.CDPROC = OBJ.CDACTIVITY 
 LEFT JOIN ADUSERDEPTPOS UDP_DEP ON (UDP_DEP.CDDEPARTMENT = GNLIST.CDDEPARTMENT AND UDP_DEP.CDUSER = 831) 
                    LEFT JOIN ADUSERDEPTPOS UDP_DEPPOS ON (UDP_DEPPOS.CDDEPARTMENT = GNLIST.CDDEPARTMENT AND UDP_DEPPOS.CDPOSITION   = GNLIST.CDPOSITION 
                        AND UDP_DEPPOS.CDUSER = 831)
                    LEFT JOIN ADUSERDEPTPOS UDP_POS ON (UDP_POS.CDPOSITION = GNLIST.CDPOSITION AND UDP_POS.CDUSER = 831)
                    LEFT JOIN ADUSERROLE USR ON (USR.CDROLE = GNLIST.CDROLE AND USR.CDUSER = 831)
                    LEFT JOIN (
                        SELECT CDTEAM FROM ADTEAMMEMBER  WHERE FGTEAMMEMBER = 4 AND CDUSER = 831
                        UNION ALL
                        SELECT CDTEAM
                        FROM ADTEAMMEMBER TM,  ADUSERDEPTPOS UDP
                        WHERE UDP.CDUSER = 831 
                            AND
                            (
                                (TM.FGTEAMMEMBER = 1 AND TM.CDDEPARTMENT = UDP.CDDEPARTMENT)
                                OR (TM.FGTEAMMEMBER = 2 AND TM.CDPOSITION = UDP.CDPOSITION)
                                OR (TM.FGTEAMMEMBER = 3 AND TM.CDDEPARTMENT = UDP.CDDEPARTMENT AND TM.CDPOSITION = UDP.CDPOSITION)
                            )
                        ) TEAM ON TEAM.CDTEAM = GNLIST.CDTEAM 
 WHERE  GNCTRL.CDRELATEDFIELD  = 501
                        AND (OBJ.FGUSETYPEACCESS = 0 OR OBJ.FGUSETYPEACCESS IS NULL) 
 AND ( GNLIST.FGACCESSTYPE = 6
                       OR (GNLIST.FGACCESSTYPE = 1  AND TEAM.CDTEAM IS NOT NULL )
                       OR (GNLIST.FGACCESSTYPE = 2  AND UDP_DEP.CDUSER IS NOT NULL)
                       OR (GNLIST.FGACCESSTYPE = 3  AND UDP_DEPPOS.CDUSER IS NOT NULL)
                       OR (GNLIST.FGACCESSTYPE = 4  AND UDP_POS.CDUSER IS NOT NULL)
                       OR (GNLIST.FGACCESSTYPE = 5  AND GNLIST.CDUSER = 831)
                       OR (GNLIST.FGACCESSTYPE = 7  AND USR.CDROLE IS NOT NULL ) 
) 
 GROUP BY  GNLIST.CDPROC ) SECPROC_1_1 ON (SECPROC_1_1.CDPROC = P.CDPROCESSMODEL)
                LEFT OUTER JOIN (SELECT  CASE WHEN COUNT(GNASSOC.CDACCESSLIST) = SUM(GNLIST.FGPERMISSION) THEN 1 ELSE -1 END AS FGPERM,  GNLIST.CDPROC,  WFP.IDOBJECT  FROM  PMPROCACCESSLIST GNLIST 
                        INNER JOIN PMPROCSECURITYCTRL GNASSOC ON GNLIST.CDACCESSLIST = GNASSOC.CDACCESSLIST AND GNLIST.CDPROC = GNASSOC.CDPROC
                        INNER JOIN PMACCESSROLEFIELD GNCTRL ON GNASSOC.CDACCESSROLEFIELD = GNCTRL.CDACCESSROLEFIELD
                        INNER JOIN PMACTIVITY OBJ ON GNASSOC.CDPROC = OBJ.CDACTIVITY
                        INNER JOIN WFPROCESS WFP ON WFP.CDPROCESSMODEL = GNASSOC.CDPROC 
 LEFT JOIN ADUSER US ON (US.CDUSER = WFP.CDUSERSTART AND US.CDLEADER = 831) 
 WHERE  GNCTRL.CDRELATEDFIELD  = 501
                        AND (OBJ.FGUSETYPEACCESS = 0 OR OBJ.FGUSETYPEACCESS IS NULL) 
 AND WFP.FGMODELWFSECURITY = 1  AND ( (GNLIST.FGACCESSTYPE = 30 AND WFP.CDUSERSTART = 831)
                OR (GNLIST.FGACCESSTYPE = 31 AND US.CDUSER IS NOT NULL) 
) 
 GROUP BY  GNLIST.CDPROC,  WFP.IDOBJECT ) SECPROC_2_1 ON (SECPROC_2_1.CDPROC = P.CDPROCESSMODEL AND SECPROC_2_1.IDOBJECT = P.IDOBJECT)
                LEFT OUTER JOIN (SELECT  CASE WHEN COUNT(GNASSOC.CDACCESSLIST) = SUM(GNLIST.FGPERMISSION) THEN 1 ELSE NULL END AS FGPERM,  GNASSOC.IDPROCESS  FROM  WFPROCSECURITYLIST GNLIST 
                        INNER JOIN WFPROCSECURITYCTRL GNASSOC ON GNLIST.CDACCESSLIST = GNASSOC.CDACCESSLIST AND GNLIST.IDPROCESS = GNASSOC.IDPROCESS
                        INNER JOIN WFPROCESS WFP ON GNASSOC.IDPROCESS = WFP.IDOBJECT 
 LEFT JOIN ADUSERDEPTPOS UDP_DEP ON (UDP_DEP.CDDEPARTMENT = GNLIST.CDDEPARTMENT AND UDP_DEP.CDUSER = 831) 
                    LEFT JOIN ADUSERDEPTPOS UDP_DEPPOS ON (UDP_DEPPOS.CDDEPARTMENT = GNLIST.CDDEPARTMENT AND UDP_DEPPOS.CDPOSITION   = GNLIST.CDPOSITION 
                        AND UDP_DEPPOS.CDUSER = 831)
                    LEFT JOIN ADUSERDEPTPOS UDP_POS ON (UDP_POS.CDPOSITION = GNLIST.CDPOSITION AND UDP_POS.CDUSER = 831)
                    LEFT JOIN ADUSERROLE USR ON (USR.CDROLE = GNLIST.CDROLE AND USR.CDUSER = 831)
                    LEFT JOIN (
                        SELECT CDTEAM FROM ADTEAMMEMBER  WHERE FGTEAMMEMBER = 4 AND CDUSER = 831
                        UNION ALL
                        SELECT CDTEAM
                        FROM ADTEAMMEMBER TM,  ADUSERDEPTPOS UDP
                        WHERE UDP.CDUSER = 831 
                            AND
                            (
                                (TM.FGTEAMMEMBER = 1 AND TM.CDDEPARTMENT = UDP.CDDEPARTMENT)
                                OR (TM.FGTEAMMEMBER = 2 AND TM.CDPOSITION = UDP.CDPOSITION)
                                OR (TM.FGTEAMMEMBER = 3 AND TM.CDDEPARTMENT = UDP.CDDEPARTMENT AND TM.CDPOSITION = UDP.CDPOSITION)
                            )
                        ) TEAM ON TEAM.CDTEAM = GNLIST.CDTEAM 
 LEFT JOIN ADUSER US ON (US.CDUSER = WFP.CDUSERSTART AND US.CDLEADER = 831) 
 WHERE  (WFP.FGMODELWFSECURITY IS NULL OR WFP.FGMODELWFSECURITY = 0) AND GNASSOC.CDACCESSROLEFIELD  = 501 AND ( GNLIST.FGACCESSTYPE = 6
                       OR (GNLIST.FGACCESSTYPE = 1  AND TEAM.CDTEAM IS NOT NULL )
                       OR (GNLIST.FGACCESSTYPE = 2  AND UDP_DEP.CDUSER IS NOT NULL)
                       OR (GNLIST.FGACCESSTYPE = 3  AND UDP_DEPPOS.CDUSER IS NOT NULL)
                       OR (GNLIST.FGACCESSTYPE = 4  AND UDP_POS.CDUSER IS NOT NULL)
                       OR (GNLIST.FGACCESSTYPE = 5  AND GNLIST.CDUSER = 831)
                       OR (GNLIST.FGACCESSTYPE = 7  AND USR.CDROLE IS NOT NULL ) 
 OR  (GNLIST.FGACCESSTYPE = 30 AND WFP.CDUSERSTART = 831)
                OR (GNLIST.FGACCESSTYPE = 31 AND US.CDUSER IS NOT NULL) 
) 
 GROUP BY  GNASSOC.IDPROCESS ) SECWFPROC_1 ON (SECWFPROC_1.IDPROCESS = P.IDOBJECT)
                 LEFT OUTER JOIN INOCCURRENCE INCID ON (P.IDOBJECT = INCID.IDWORKFLOW) 
                            LEFT OUTER JOIN GNGENTYPE GNT ON (INCID.CDOCCURRENCETYPE = GNT.CDGENTYPE) 
                            LEFT OUTER JOIN GNREVISIONSTATUS GNRS ON (INCID.CDSTATUS = GNRS.CDREVISIONSTATUS) 
                             INNER JOIN PBPROBLEM PB ON PB.CDOCCURRENCE = INCID.CDOCCURRENCE  WHERE  P.FGSTATUS <= 5    AND  (GNT.CDTYPEROLE IS NULL OR (EXISTS (SELECT 1 FROM GNTYPEROLE GNROLE_ALIAS WHERE GNROLE_ALIAS.CDTYPEROLE = GNT.CDTYPEROLE AND GNROLE_ALIAS.FGTYPE = 1)) OR ( EXISTS (SELECT 1 FROM GNTYPEPERMISSION GNROLEDEF_ALIAS WHERE GNROLEDEF_ALIAS.CDTYPEROLE = GNT.CDTYPEROLE AND GNROLEDEF_ALIAS.CDACCESSLIST = 1 AND GNROLEDEF_ALIAS.CDUSER = 831 ))) AND 
                (
                    (
                        (
                            (PP.FGUSETYPEACCESS = 1 AND SECPROCTP_1.FGPERM = 1)
                            OR
                            (
                                (PP.FGUSETYPEACCESS = 0 OR PP.FGUSETYPEACCESS IS NULL) AND 
                                (
                                    (SECPROC_1_1.FGPERM = 1 AND (SECPROC_2_1.FGPERM IS NULL OR SECPROC_2_1.FGPERM <> -1))
                                    OR (SECPROC_2_1.FGPERM = 1 AND (SECPROC_1_1.FGPERM IS NULL OR SECPROC_1_1.FGPERM <> -1))
                                )
                            )
                        )
                        AND P.FGMODELWFSECURITY = 1
                    )
                    OR ((P.FGMODELWFSECURITY IS NULL OR P.FGMODELWFSECURITY = 0) AND SECWFPROC_1.FGPERM = 1)
                )
 AND INCID.FGOCCURRENCETYPE = 2 ) TEMPANA